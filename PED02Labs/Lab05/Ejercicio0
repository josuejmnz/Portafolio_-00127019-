#include <iostream>

#include <stdlib.h>

using namespace std;

//------ Creacion de nodo y de arbol ------

struct nodo

{

	int info;

	struct nodo *izq;

	struct nodo *der;

};

int numNodos = 0;

typedef struct nodo Nodo;

typedef struct nodo *Arbol;

Arbol crearArbol(int x)

{

	Arbol p = new Nodo;

	p->info = x;

	p->izq = NULL;

	p->der = NULL;

	return p;

}


void verArbol(Arbol a, int n)

{

	int numNodos = 0;

	if (a == NULL)

		return;

	verArbol(a->der, n + 1);

	for (int i = 0; i < n; i++)

		cout << " ";

	numNodos++;

	cout << a->info << endl;

	verArbol(a->izq, n + 1);

}


int alturaAB(Arbol a)

{

	int AltIzq, AltDer;

	if (a == NULL)

		return -1;

	else

	{

		AltIzq = alturaAB(a->izq);

		AltDer = alturaAB(a->der);

		if (AltIzq > AltDer)

			return AltIzq + 1;

		else

			return AltDer + 1;

	}

}


//------ Agregar nodos a un arbol ------

void asignarIzq(Arbol a, int unDato)

{

	if (a == NULL)

		cout << "Error: arbol vacio" << endl;

	else if (a->izq != NULL)

		cout << "Error: subarbol IZQ ya existe" << endl;

	else

		a->izq = crearArbol(unDato);

}

void asignarDer(Arbol a, int unDato)

{

	if (a == NULL)

		cout << "Error: arbol vacio" << endl;

	else if (a->der != NULL)

		cout << "Error: subarbol DER ya existe" << endl;

	else

		a->der = crearArbol(unDato);

}

void agregarNodo(Arbol a)

{ //solicitar informacion (numero a agregar)

	int numero = 0;

	cout << "Numero a agregar: ";

	cin >> numero;

	Arbol p = a;

	//desplazarse hasta el lugar adecuado

	while (true)

	{

		if (numero == p->info)

		{

			cout << "Error: " << numero << " ya existe" << endl;

			return;

		}

		else if (numero < p->info)

		{

			//ir a la izquierda

			if (p->izq == NULL)

				break;

			else

				p = p->izq;

		}

		else

		{

			//ir a la derecha

			if (p->der == NULL)

				break;

			else

				p = p->der;

		}

	} //agregar el nuevo nodo

	if (numero < p->info)

		asignarIzq(p, numero);

	else

		asignarDer(p, numero);

}

//------ Recorrer un arbol(in, pre y post orden)-- ----

void preorden(Arbol a)

{

	if (a != NULL)

	{

		cout << " " << a->info;

		preorden(a->izq);

		preorden(a->der);

	}

}

void inorden(Arbol a)

{

	if (a != NULL)

	{

		inorden(a->izq);

		cout << " " << a->info;

		inorden(a->der);

	}

}

void postorden(Arbol a)

{

	if (a != NULL)

	{

		postorden(a->izq);

		postorden(a->der);

		cout << " " << a->info;

	}

}

void recorrerArbol(Arbol a)

{

	cout << "Recorrido PRE orden:";

	preorden(a);

	cout << endl;

	cout << "Recorrido IN orden:";

	inorden(a);

	cout << endl;

	cout << "Recorrido POST orden:";

	postorden(a);

	cout << endl;

}

int main()

{

	int variable = 0;

	cout << "Inicializando arbol...\nValor contenido en la raiz: ";

	cin >> variable;

	Arbol arbol = crearArbol(variable);

	bool continuar = true;

	do

	{

		int opcion = 0;

		cout << "Menu: \n\t1) Agregar\n\t2) Recorrer\n\t3) Numero nodos\n\t4) Altura"

			Â << "\n\t5) Salir\n\tOpcion elegida: ";

		cin >> opcion;

		switch (opcion)

		{

		case 1:

			agregarNodo(arbol);

			break;

		case 2:

			recorrerArbol(arbol);

			break;

		case 3:

			verArbol(arbol, 0);

			cout<<"el numero de nodos es: ";

			cout<<numNodos;

			break;

		case 4:

			int h;

			h = alturaAB(arbol);

			cout<<"La altura es: "<<h<<endl;

			break;

		case 5:

			continuar = false;

			break;

		default:

			cout << "Opcion erronea!" << endl;

			break;

		}

	} while (continuar);

	return 0;

}